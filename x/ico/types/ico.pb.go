// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ico/ico.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ICO struct {
	// Project unique id of each project
	ProjectId              uint64                                 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" yaml:"project_id"`
	TokenForDistribution   []types.Coin                           `protobuf:"bytes,2,rep,name=token_for_distribution,json=tokenForDistribution,proto3" json:"token_for_distribution" yaml:"token_for_distribution"`
	TotalDistributedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_distributed_amount,json=totalDistributedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_distributed_amount" yaml:"total_distributed_amount"`
	TokenListingPrice      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=token_listing_price,json=tokenListingPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_listing_price" yaml:"token_listing_price"`
}

func (m *ICO) Reset()         { *m = ICO{} }
func (m *ICO) String() string { return proto.CompactTextString(m) }
func (*ICO) ProtoMessage()    {}
func (*ICO) Descriptor() ([]byte, []int) {
	return fileDescriptor_01997575a86e18b6, []int{0}
}
func (m *ICO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICO.Merge(m, src)
}
func (m *ICO) XXX_Size() int {
	return m.Size()
}
func (m *ICO) XXX_DiscardUnknown() {
	xxx_messageInfo_ICO.DiscardUnknown(m)
}

var xxx_messageInfo_ICO proto.InternalMessageInfo

func (m *ICO) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *ICO) GetTokenForDistribution() []types.Coin {
	if m != nil {
		return m.TokenForDistribution
	}
	return nil
}

func init() {
	proto.RegisterType((*ICO)(nil), "nghuyenthevinh2000.nebula.ico.ICO")
}

func init() { proto.RegisterFile("ico/ico.proto", fileDescriptor_01997575a86e18b6) }

var fileDescriptor_01997575a86e18b6 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x4d, 0xcc, 0x43, 0x78, 0x11, 0x17, 0x2f, 0x3e, 0x4b, 0x2c, 0x34, 0x29, 0x01, 0xa5, 0x1b,
	0x67, 0xd2, 0xea, 0xca, 0x9d, 0x69, 0x11, 0x2a, 0x05, 0x35, 0x4b, 0x37, 0x21, 0x99, 0x8c, 0xc9,
	0xd8, 0x64, 0x6e, 0x48, 0x26, 0xc5, 0x82, 0x7f, 0xe0, 0xc6, 0x3f, 0x72, 0xdb, 0x65, 0x97, 0xe2,
	0x22, 0x48, 0xfb, 0x07, 0xfd, 0x02, 0x49, 0xa6, 0xd2, 0x8a, 0xdd, 0xbc, 0xd5, 0xcc, 0x9c, 0x73,
	0xe7, 0x9c, 0xc3, 0xe5, 0xe8, 0x0f, 0x19, 0x01, 0xcc, 0x08, 0xa0, 0xa2, 0x04, 0x01, 0xc6, 0x80,
	0x27, 0x69, 0xbd, 0xa6, 0x5c, 0xa4, 0x74, 0xc5, 0x78, 0x3a, 0x71, 0x5d, 0x17, 0x71, 0x1a, 0xd5,
	0x59, 0x88, 0x18, 0x81, 0xfe, 0x6d, 0x02, 0x09, 0x74, 0x93, 0xb8, 0xbd, 0xc9, 0x4f, 0x7d, 0x8b,
	0x40, 0x95, 0x43, 0x85, 0xa3, 0xb0, 0xa2, 0x78, 0x35, 0x8e, 0xa8, 0x08, 0xc7, 0x98, 0x00, 0xe3,
	0x92, 0x77, 0x7e, 0x68, 0xba, 0x36, 0x9f, 0xbe, 0x33, 0x5e, 0xea, 0x7a, 0x51, 0xc2, 0x67, 0x4a,
	0x44, 0xc0, 0x62, 0x53, 0x1d, 0xaa, 0xa3, 0x2b, 0xef, 0xf1, 0xa1, 0xb1, 0x6f, 0xd6, 0x61, 0x9e,
	0xbd, 0x72, 0x4e, 0x9c, 0xe3, 0x5f, 0x1f, 0x1f, 0xf3, 0xd8, 0x58, 0xe9, 0x3d, 0x01, 0x4b, 0xca,
	0x83, 0x4f, 0x50, 0x06, 0x31, 0xab, 0x44, 0xc9, 0xa2, 0x5a, 0x30, 0xe0, 0xe6, 0xbd, 0xa1, 0x36,
	0x7a, 0x30, 0x79, 0x82, 0xa4, 0x3d, 0x6a, 0xed, 0xd1, 0xd1, 0x1e, 0x4d, 0x81, 0x71, 0xef, 0xe9,
	0xa6, 0xb1, 0x95, 0x43, 0x63, 0x0f, 0xa4, 0xc1, 0x65, 0x19, 0xc7, 0xbf, 0xed, 0x88, 0x37, 0x50,
	0xce, 0xce, 0x60, 0xe3, 0x9b, 0xaa, 0x9b, 0x02, 0x44, 0x98, 0x9d, 0xa6, 0x69, 0x1c, 0x84, 0x39,
	0xd4, 0x5c, 0x98, 0xda, 0x50, 0x1d, 0x5d, 0x7b, 0x1f, 0x5a, 0xfd, 0x5f, 0x8d, 0xfd, 0x2c, 0x61,
	0x22, 0xad, 0x23, 0x44, 0x20, 0xc7, 0xc7, 0x5d, 0xc8, 0xe3, 0x79, 0x15, 0x2f, 0xb1, 0x58, 0x17,
	0xb4, 0x42, 0x73, 0x2e, 0x0e, 0x8d, 0x6d, 0xff, 0x4d, 0x72, 0x59, 0xd7, 0xf1, 0x7b, 0x1d, 0x35,
	0x3b, 0x31, 0xaf, 0x3b, 0xc2, 0xf8, 0xaa, 0x3f, 0x92, 0xf1, 0x33, 0x56, 0x09, 0xc6, 0x93, 0xa0,
	0x28, 0x19, 0xa1, 0xe6, 0x55, 0x97, 0x63, 0x71, 0xe7, 0x1c, 0xfd, 0xf3, 0x8d, 0xfc, 0x23, 0xe9,
	0xf8, 0x37, 0x1d, 0xba, 0x90, 0xe0, 0xfb, 0x16, 0xf3, 0xde, 0x6e, 0x76, 0x96, 0xba, 0xdd, 0x59,
	0xea, 0xef, 0x9d, 0xa5, 0x7e, 0xdf, 0x5b, 0xca, 0x76, 0x6f, 0x29, 0x3f, 0xf7, 0x96, 0xf2, 0xd1,
	0x3d, 0xb3, 0xfc, 0xbf, 0x3b, 0x58, 0x76, 0x07, 0x7f, 0x69, 0x2b, 0x26, 0x03, 0x44, 0xf7, 0xbb,
	0x52, 0xbc, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x64, 0xd9, 0xb6, 0x26, 0x7a, 0x02, 0x00, 0x00,
}

func (m *ICO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenListingPrice.Size()
		i -= size
		if _, err := m.TokenListingPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIco(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalDistributedAmount.Size()
		i -= size
		if _, err := m.TotalDistributedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIco(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TokenForDistribution) > 0 {
		for iNdEx := len(m.TokenForDistribution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenForDistribution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIco(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ProjectId != 0 {
		i = encodeVarintIco(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIco(dAtA []byte, offset int, v uint64) int {
	offset -= sovIco(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ICO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovIco(uint64(m.ProjectId))
	}
	if len(m.TokenForDistribution) > 0 {
		for _, e := range m.TokenForDistribution {
			l = e.Size()
			n += 1 + l + sovIco(uint64(l))
		}
	}
	l = m.TotalDistributedAmount.Size()
	n += 1 + l + sovIco(uint64(l))
	l = m.TokenListingPrice.Size()
	n += 1 + l + sovIco(uint64(l))
	return n
}

func sovIco(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIco(x uint64) (n int) {
	return sovIco(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ICO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenForDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIco
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenForDistribution = append(m.TokenForDistribution, types.Coin{})
			if err := m.TokenForDistribution[len(m.TokenForDistribution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDistributedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIco
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDistributedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenListingPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIco
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenListingPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIco(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIco
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIco
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIco
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIco
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIco
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIco
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIco        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIco          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIco = fmt.Errorf("proto: unexpected end of group")
)
